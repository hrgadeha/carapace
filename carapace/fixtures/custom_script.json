[
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Receipt",
  "modified": "2020-04-30 23:09:58.864845",
  "name": "Purchase Receipt-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on(\"Purchase Receipt\", \"on_submit\", function(frm, doctype, name) {\n\tif(frm.doc.po != \"\"){\nfrappe.call({\n\t\"method\": \"carapace.carapace.doctype.gate_entry.gate_entry.UpdateGE\",\n\targs: {\n\t\tdoctype: \"Purchase Receipt\",\n\t\tpo: frm.doc.po,\n\t\tgate_entry: frm.doc.gate_entry\n     \t},\n\n\tcallback:function(r){\n     ;}\n});\n}\n});\n\nfrappe.ui.form.on(\"Purchase Receipt\", \"onload\", function(frm){\n    cur_frm.set_query(\"gate_entry\", function(){\n        return {\n            \"filters\": [\n                [\"Gate Entry\", \"gate_entry_type\", \"!=\", \"Rejection By ERP\"],\n                [\"Gate Entry\", \"status\", \"=\", \"Open\"]\n            ]\n        }\n    });\n});\n\nfrappe.ui.form.on(\"Purchase Receipt\", \"onload\", function(frm){\n    cur_frm.set_query(\"po\", function(){\n        return {\n            \"filters\": [\n                [\"Purchase Order\", \"gate_entry\", \"=\", frm.doc.gate_entry]\n            ]\n        }\n    });\n});\n\nfrappe.ui.form.on(\"Purchase Receipt\", {\n    \"get_data\": function(frm) {\n\t\tif(frm.doc.po == \"\"){\n        \t\tfrappe.msgprint(\"Gate Entry : \" + frm.doc.gate_entry + \" Does Not Have Any Linked Purchase Order\");\n\t\t}\n\t\tif(frm.doc.po){\n\t\t\tfrappe.model.with_doc(\"Gate Entry\", frm.doc.gate_entry, function() {\n\t\t        cur_frm.clear_table(\"items\");\n\t\t        frm.refresh_field(\"items\");\n            \t\tvar tabletransfer= frappe.model.get_doc(\"Gate Entry\", frm.doc.gate_entry);\n            \t\tvar tabletransfer1= frappe.model.get_doc(\"Purchase Order\", frm.doc.po);\n            \t\t//frm.set_value(\"shipping_address\",po.shipping_address);\n            \t\tconsole.log(frm.doc.po);\n            \t\tconsole.log(tabletransfer);\n            \t\tconsole.log(tabletransfer1);\n            \t\t//console.log(po.shipping_address);\n            \t\t$.each(tabletransfer.gate_entry_items, function(index, row){\n                \t\tif(row.received_qty > 1){\n                \t\tvar d = frm.add_child(\"items\");\n                \t\td.item_code = row.item_code;\n\t\t\t\t        d.item_name = row.item_name;\n\t\t\t            d.description = row.description;\n\t\t\t\t        d.received_qty = row.received_qty;\n\t\t\t\t        d.qty = row.received_qty;\n\t\t\t\t        d.uom = row.uom;\n\t\t\t\t        d.conversion_factor = 1;\n\t\t\t\t        d.rate = row.rate;\n\t\t\t    cur_frm.refresh_field(\"items\");\n                \t\t}\n            });\n        });\n}\n}\n});\n\ncur_frm.add_fetch('gate_entry', 'supplier_name', 'supplier');\ncur_frm.add_fetch('gate_entry', 'type_of_vehicle', 'mode_of_transport');\ncur_frm.add_fetch('gate_entry', 'contact_number', 'contact_number');\ncur_frm.add_fetch('gate_entry', 'driver_name', 'driver_name');\ncur_frm.add_fetch('gate_entry', 'vehicle_number', 'lr_no');\ncur_frm.add_fetch('gate_entry', 'remarks', 'gate_entry_remarks');\ncur_frm.add_fetch('gate_entry', 'bill_or_challan', 'bill_or_challan');\ncur_frm.add_fetch('gate_entry', 'bill_no', 'bill_no');\ncur_frm.add_fetch('gate_entry', 'challan_no', 'challan_no');\ncur_frm.add_fetch('gate_entry', 'bill_date', 'bill_date');\ncur_frm.add_fetch('gate_entry', 'challan_date', 'challan_date');"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Order",
  "modified": "2020-03-20 22:51:30.046029",
  "name": "Purchase Order-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Purchase Order', {\n\t\"validate\": function(frm) {\n        \tvar grand_total = frm.doc.grand_total;\n        \t   frm.set_value(\"advice_outstanding_amount\",grand_total);\n\t\t       frm.set_value(\"committed_amount\",grand_total);\n\t\t       frm.set_value(\"project_site\",frm.doc.project);\n\t\t       frm.set_value(\"advise_total\",frm.doc.total);\n\t\t       frm.set_value(\"advise_grand_total\",frm.doc.grand_total);\n        }\n});\n\nfrappe.ui.form.on('Purchase Order', {\n\t\"order_type\": function(frm) {\n        \tif(frm.doc.order_type == 'Work order'){\n        \t   frm.set_value(\"naming_series\",'SER-.#####');\n        \t   frm.set_value(\"tc_name\",'Service Order');\n\t\t}\n\t\t    if(frm.doc.order_type == 'Purchase Order'){\n        \t   frm.set_value(\"naming_series\",'PO-.#####');\n        \t   frm.set_value(\"tc_name\",'Purchase Order');\n\t\t}\n        }\n});\n\nfrappe.ui.form.on(\"Purchase Order\", \"order_type\", function(frm){\ncur_frm.clear_table(\"items\");\nfrm.refresh_field(\"items\");\nif(frm.doc.order_type == 'Work order'){\n\tcur_frm.fields_dict['items'].grid.get_field('item_code').get_query = function(doc) {\n        return {\n            filters: [[\n                'Item', 'item_group', 'in', 'Services Received,Services Rendered'\n            \t     ]]\n           \t};\n    \t};\n   }\nif(frm.doc.order_type == 'Purchase Order'){\n\tcur_frm.fields_dict['items'].grid.get_field('item_code').get_query = function(doc) {\n        return {\n            filters: [[\n                'Item', 'item_group', \"in\",'Consumable, Products, PROJECT-Quotation, Raw Material,safety,Sub Assemblies,Tools Or Consumables Or Hardware,Peripheral Computer'\n            \t     ]]\n           \t};\n    \t};\n   }\n});\n\nfrappe.ui.form.on(\"Purchase Order\", \"onload\", function(frm) {\n    cur_frm.set_query(\"budget_head\", function() {\n        return {\n            \"filters\": {\n                \"project\": frm.doc.project\n            }\n        };\n    });\n});\n\nfrappe.ui.form.on(\"Purchase Order\", \"onload\", function(frm) {\n    cur_frm.set_query(\"project\", function() {\n        return {\n            \"filters\": {\n                \"sales_order\": frm.doc.sales_order\n            }\n        };\n    });\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Payment Entry",
  "modified": "2020-04-02 19:59:49.812145",
  "name": "Payment Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on(\"Payment Entry\", {\n  payment_advice: function(frm) {\n    if (frm.doc.payment_advice && frm.doc.party_type == 'Supplier'){\n\tcur_frm.refresh();\n\tcur_frm.clear_table(\"references\");\n\tcur_frm.refresh_fields();\n\t\n    frappe.call({\n    \"method\": \"carapace.carapace.doctype.payment_advice_form.payment_advice_form.insert_data\",\nargs: {\ndoctype: \"Payment Advice Form\",\npayment_advice: frm.doc.payment_advice\n},\ncallback:function(r){\n\tvar len=r.message.length;\n\tconsole.log(r)\n\tfor (var i=0;i<len;i++){\n\t        var row = frm.add_child(\"references\");\n\t    row.reference_doctype = r.message[i][0];\n\t\trow.reference_name = r.message[i][1];\n\t\trow.total_amount = r.message[i][2];\n\t\trow.outstanding_amount = r.message[i][3];\n\t\trow.allocated_amount = r.message[i][4];\n\t}\n\t\tcur_frm.refresh();\n\t}\n    });\n}\n}\n});\n\ncur_frm.add_fetch(\"payment_advice\",\"allocate_amount\",\"paid_amount\")\ncur_frm.add_fetch(\"payment_advice\",\"budget_head\",\"budget_head\")\ncur_frm.add_fetch(\"payment_advice\",\"reference_type\",\"voucher_type\")\ncur_frm.add_fetch(\"payment_advice\",\"reference_no\",\"voucher_no\")\ncur_frm.add_fetch(\"payment_advice\",\"total\",\"total\")\n\nfrappe.ui.form.on(\"Payment Entry\", \"on_submit\", function(frm, doctype, name) {\n\tif(frm.doc.payment_advice){\nfrappe.call({\n\t\"method\": \"carapace.carapace.doctype.payment_advice_form.payment_advice_form.UpdatePA\",\n\targs: {\n\t\tdoctype: \"Payment Advice Form\",\n\t\tpayment_advice: frm.doc.payment_advice\n     \t},\n\n\tcallback:function(r){\n     }\n});\n}\n});\n\nfrappe.ui.form.on(\"Payment Entry\", \"onload\", function(frm) {\n    cur_frm.set_query(\"payment_advice\", function() {\n        return {\n            \"filters\": {\n                \"status\": \"Open\",\n                \"party\": frm.doc.party,\n                \"docstatus\": 1\n            }\n        };\n    });\n});\n\nfrappe.ui.form.on('Payment Entry', 'party_type', function(frm) {\n   frm.set_value('party', '')\n   frm.set_value('party_name', '')\n   frm.set_value('paid_amount', '')\n   frm.set_value('payment_advice', '')\n});\n\nfrappe.ui.form.on(\"Payment Entry\", {\n    \"get_data\": function(frm) {\n\t\tif(frm.doc.voucher_type == 'Purchase Invoice'){\n\t\t\tfrappe.model.with_doc(frm.doc.voucher_type, frm.doc.voucher_no, function() {\n\t\t        cur_frm.clear_table(\"budget_table\");\n            \t\tvar tabletransfer= frappe.model.get_doc(frm.doc.voucher_type, frm.doc.voucher_no)\n            \t\t$.each(tabletransfer.items, function(index, row){\n                \t\tvar d = frm.add_child(\"budget_table\");\n                \t\td.project = row.project;\n\t\t\t\td.budget_head = row.budget_head;\n\t\t\t\td.amount = row.amount;\n\t\t\tfrm.refresh_field(\"budget_table\");\n            });\n});\n}\n\t\tif(frm.doc.voucher_type == 'Journal Entry'){\n\t\t\tfrappe.model.with_doc(frm.doc.voucher_type, frm.doc.voucher_no, function() {\n\t\t        cur_frm.clear_table(\"budget_table\");\n            \t\tvar tabletransfer= frappe.model.get_doc(frm.doc.voucher_type, frm.doc.voucher_no)\n            \t\t$.each(tabletransfer.accounts, function(index, row){\n\t\t\tif(row.debit_in_account_currency){\n                \t\tvar d = frm.add_child(\"budget_table\");\n                \t\td.project = row.project;\n\t\t\t\td.budget_head = row.budget_head;\n\t\t\t\td.amount = row.debit_in_account_currency;\n\t\t\tfrm.refresh_field(\"budget_table\");\n\t\t}\n            });\n});\n}\n\t\tif(frm.doc.voucher_type == 'Salary Slip'){\n\t\t\tfrappe.model.with_doc(frm.doc.voucher_type, frm.doc.voucher_no, function() {\n\t\t        cur_frm.clear_table(\"budget_table\");\n            \t\tvar tabletransfer= frappe.model.get_doc(frm.doc.voucher_type, frm.doc.voucher_no)\n            \t\t$.each(tabletransfer.project_and_budget_allocation, function(index, row){\n                \t\tvar d = frm.add_child(\"budget_table\");\n                \t\td.project = row.project;\n\t\t\t\td.budget_head = row.budget_head;\n\t\t\t\td.amount = row.amount;\n\t\t\tfrm.refresh_field(\"budget_table\");\n            });\n});\n}\n}\n});\n\n\n\nfrappe.ui.form.on('Payment Entry', {\n    refresh: function(frm) {\n        if (frm.doc.voucher_type == 'Purchase Invoice') {\n        \tfrm.set_df_property('voucher_type', 'read_only',1);\n\t\tfrm.set_df_property('voucher_type', 'hidden',1);\n    } \n    if (frm.doc.voucher_type != 'Purchase Invoice') {\n        \tfrm.set_df_property('voucher_type', 'read_only',0);\n\t\tfrm.set_df_property('voucher_type', 'hidden',0);\n    } \n} \n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Invoice",
  "modified": "2019-11-21 00:13:59.465788",
  "name": "Purchase Invoice-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "\nfrappe.ui.form.on('Purchase Invoice', {\n\t\"validate\": function(frm) {\n        \tvar outstanding_amount = frm.doc.outstanding_amount;\n\t\tif(frm.doc.update_budget_head && frm.doc.committed_amount == 0){\n\t\t\tfrm.set_value(\"committed_amount\",outstanding_amount);\n\t\t}\n        \t   frm.set_value(\"advice_outstanding_amount\",outstanding_amount);\n\t\tif (frm.doc.supplier_invoice_amount != frm.doc.total) {\n        \tmsgprint('Supplier invoice amount : '+frm.doc.supplier_invoice_amount+ ' is not matching with basic total : '+frm.doc.total);\n        \tvalidated = false;\n    } \n        }\n});\n\nfrappe.ui.form.on(\"Purchase Invoice\", \"onload\", function(frm) {\n    cur_frm.set_query(\"budget_head\", function() {\n        return {\n            \"filters\": {\n                \"project\": frm.doc.project\n            }\n        };\n    });\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    update_budget_head: function(frm) {\n        if(frm.doc.update_budget_head){\n        msgprint(\"Update Commited Check Box = 1, That will Add Commited Amount in Budget Head. Uncheck this if you don't want to affect commited amount in budget head\");\n        }\n    } \n});\n\ncur_frm.set_query(\"budget_head\", \"items\", function(doc, cdt, cdn) {\n\tvar d = locals[cdt][cdn];\n\treturn{\n\t\tfilters: [\n\t\t\t['Budget Head', 'project', '=', d.project]\n\t\t]\n\t};\n});\n\nfrappe.ui.form.on('Purchase Invoice',  {\n    update_budget_head: function(frm) {\n         if(frm.doc.update_budget_head){\n                var d = frappe.meta.get_docfield(\"Purchase Invoice Item\", \"budget_head\", cur_frm.doc.name);\n                d.reqd = 1;\n        }\n         if(!frm.doc.update_budget_head){\n                var d = frappe.meta.get_docfield(\"Purchase Invoice Item\", \"budget_head\", cur_frm.doc.name);\n                d.reqd = 0;\n        }\n    } \n});\n\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Expense Claim",
  "modified": "2019-07-12 17:41:52.390092",
  "name": "Expense Claim-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "cur_frm.set_query(\"budget_head\", \"expenses\", function(doc, cdt, cdn) {\n\tvar d = locals[cdt][cdn];\n\treturn{\n\t\tfilters: [\n\t\t\t['Budget Head', 'project', '=', cur_frm.doc.project]\n\t\t]\n\t}\n});\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Journal Entry",
  "modified": "2019-07-31 22:32:58.606390",
  "name": "Journal Entry-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Journal Entry Account', 'debit_in_account_currency', function(frm) {\n        msgprint('Budget head required against debit amount');\n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Employee",
  "modified": "2019-08-11 12:38:25.662872",
  "name": "Employee-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "cur_frm.set_query(\"budget_head\", \"project_and_budget_allocation\", function(doc, cdt, cdn) {\n\tvar d = locals[cdt][cdn];\n\treturn{\n\t\tfilters: [\n\t\t\t['Budget Head', 'project', '=', d.project]\n\t\t]\n\t}\n});\n\nfrappe.ui.form.on('Employee', {\n    validate: function(frm) {\n\tvar d = frm.doc.project_and_budget_allocation;\n        var total = 0.0\n\tfor (var j in d){\n\t\ttotal += d[j].percent\n\t} \n\tif(total != 100){\n\t\tfrappe.throw(\"Allocation should not be more than 100 in Budget Table, Current Value is \" + total)\n\t}\n    } \n});"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Salary Slip",
  "modified": "2019-08-22 16:27:50.906500",
  "name": "Salary Slip-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on(\"Salary Slip\", {\n    \"get_details\": function(frm) {\n\tif (frm.doc.employee){\n        \tfrappe.model.with_doc(\"Employee\", frm.doc.employee, function() {\n\t\tcur_frm.clear_table(\"project_and_budget_allocation\");\n            \t\tvar tabletransfer= frappe.model.get_doc(\"Employee\", frm.doc.employee)\n\t\t\tvar total = 0.0\n            \t\t$.each(tabletransfer.project_and_budget_allocation, function(index, row){\n                \t\tvar d = frm.add_child(\"project_and_budget_allocation\");\n                \t\td.project = row.project;\n\t\t\t\td.budget_head = row.budget_head;\n\t\t\t\td.percent = row.percent;\n\t\t\t\td.amount = (frm.doc.gross_pay * (row.percent/100));\n\t\t\t\ttotal += d.amount \n\t\t\t\tfrm.set_value(\"budget_total\",total)\n                \tfrm.refresh_field(\"project_and_budget_allocation\");\n            });\n        });\n    }\n}\n});\n\nfrappe.ui.form.on('Salary Slip', {\n    validate: function(frm) {\n\tvar d = frm.doc.project_and_budget_allocation;\n        var total = 0.0\n\tfor (var j in d){\n\t\ttotal += d[j].percent\n\t} \n\tif(total != 100){\n\t\tfrappe.throw(\"Allocation should be equal to 100 in Budget Table, Current Value is \" + total)\n\t}\n    } \n});\n\nfrappe.ui.form.on(\"Project And Budget Allocation\", {\n\t\"percent\": function(frm, cdt, cdn) {\n\t\tcur_frm.refresh();\n\t\tcur_frm.refresh_fields();\n\t\tvar d = locals[cdt][cdn];\n\t\tfrappe.model.set_value(d.doctype, d.name, \"amount\", (d.percent / 100) * frm.doc.gross_pay);\n\t\tvar total = 0;\n\t\tvar budget = frm.doc.project_and_budget_allocation;\n\n   \tfor(var i in budget) {\n\t\ttotal = total + budget[i].amount;\n\t\tfrm.set_value(\"budget_total\", total);\n\t}\t\n\t}\n});\n\nfrappe.ui.form.on(\"Project And Budget Allocation\", {\n\t\"project_and_budget_allocation_remove\": function(frm, cdt, cdn) {\n\t\tcur_frm.refresh();\n\t\tcur_frm.refresh_fields();\n\t\tvar total = 0;\n\t\tvar budget = frm.doc.project_and_budget_allocation;\n\n   \tfor(var i in budget) {\n\t\ttotal = total + budget[i].amount;\n\t\tfrm.set_value(\"budget_total\", total);\n\t}\t\n\t}\n});\n\ncur_frm.set_query(\"budget_head\", \"project_and_budget_allocation\", function(doc, cdt, cdn) {\n\tvar d = locals[cdt][cdn];\n\treturn{\n\t\tfilters: [\n\t\t\t['Budget Head', 'project', '=', d.project]\n\t\t]\n\t}\n});"
 }
]